version: '3.8'

services:
  # PostgreSQLデータベース（本番用）
  db:
    image: postgres:16-alpine
    container_name: express-study-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-express_study}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 30s
      timeout: 10s
      retries: 3

  # Expressアプリケーション（本番用）
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: express-study-app-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-express_study}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - '3000:3000'
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    command: npm start

  # Redis（本番用）
  redis:
    image: redis:7-alpine
    container_name: express-study-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx（リバースプロキシ）
  nginx:
    image: nginx:alpine
    container_name: express-study-nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - app-network
    depends_on:
      - app

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  app-network:
    driver: bridge